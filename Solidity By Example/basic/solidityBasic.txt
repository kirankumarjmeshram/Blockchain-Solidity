constant vs immutable variables
- keywords used to define variables that cannot be changed after they are assigned a value

constant -
- Accessing constant variables does not consume any gas during contract execution.
- Constant variables can be of any type, including primitive types and complex types like arrays and structs
- They are evaluated at compile-time and their values are directly substituted wherever they are used in the code

immutable -
- Accessing immutable variables consumes gas during contract execution
- Immutable variables can only be of value types (e.g., primitive types like uint, bool, address, etc.) and cannot be arrays or structs.
- They are assigned a value during contract deployment and cannot be changed afterward

ether vs wei
- ether is equal to 10^*18 wei.
- 1 ether == 10e18

Storage, Memory, Calldata
Storage : This is global memory available to 
all functions within the contract. This storage is a permanent storage 
that Ethereum stores on every node within its environment.

Memory: This is local memory available to every function within a contract.
This is short lived and fleeting memory that gets torn down when the function completes 
its execution.

Calldata : This is where all incoming function execution data, including function arguments, 
is stored. This is a non-modifiable memory location.